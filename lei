# 多态性是指具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容的函数。
# 在面向对象方法中一般是这样表述多态性：向不同的对象发送同一条消息，不同的对象在接收时会产生不同的行为（即方法）
# 也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。
# 上述代码子类是约定俗称的实现这个方法，加上abstractmethod装饰器后严格控制子类必须实现这个方法
from abc import ABCMeta,abstractmethod
class Sender(metaclass=ABCMeta):  # 同一类事物:动物
    @abstractmethod                   # 上述代码子类是约定俗称的实现这个方法，加上@abc.abstractmethod装饰器后严格控制子类必须实现这个方法
    def send(self):
        raise AttributeError('子类必须实现这个方法')
class Bark(Sender):  # 动物的形态之一:人
    def send(self,key,content,sound,url):
        print(f'Bark正在发送{key}{content}{sound}{url}')
class Pushdeer(Sender):  # 动物的形态之二:狗
    def send(self,key,content,url):
        print('Pushdeer正在发送')
class Wxpusher(Sender):  # 动物的形态之三:猪
    def send(self,key,content,url):
        print('Wxpusher正在发送')

will = Bark()

will.send(key='a',content='b',sound='c',url='d')
